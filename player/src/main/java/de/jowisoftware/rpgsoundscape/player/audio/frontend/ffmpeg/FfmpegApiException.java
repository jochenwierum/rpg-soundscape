package de.jowisoftware.rpgsoundscape.player.audio.frontend.ffmpeg;

public class FfmpegApiException extends RuntimeException {
    public FfmpegApiException(int res, String message) {
        super("%s, status: %s (%d)".formatted(message, decode(res), res));
    }

    private static String decode(int code) {
        return switch (code) {
            case (int) -1L -> "EPERM";
            case (int) -2L -> "ENOENT";
            case (int) -3L -> "ESRCH";
            case (int) -4L -> "EINTR";
            case (int) -5L -> "EIO";
            case (int) -6L -> "ENXIO";
            case (int) -7L -> "E2BIG";
            case (int) -8L -> "ENOEXEC";
            case (int) -9L -> "EBADF";
            case (int) -10L -> "ECHILD";
            case (int) -11L -> "EAGAIN";
            case (int) -12L -> "ENOMEM";
            case (int) -13L -> "EACCES";
            case (int) -14L -> "EFAULT";
            case (int) -15L -> "ENOTBLK";
            case (int) -16L -> "EBUSY";
            case (int) -17L -> "EEXIST";
            case (int) -18L -> "EXDEV";
            case (int) -19L -> "ENODEV";
            case (int) -20L -> "ENOTDIR";
            case (int) -21L -> "EISDIR";
            case (int) -22L -> "EINVAL";
            case (int) -23L -> "ENFILE";
            case (int) -24L -> "EMFILE";
            case (int) -25L -> "ENOTTY";
            case (int) -26L -> "ETXTBSY";
            case (int) -27L -> "EFBIG";
            case (int) -28L -> "ENOSPC";
            case (int) -29L -> "ESPIPE";
            case (int) -30L -> "EROFS";
            case (int) -31L -> "EMLINK";
            case (int) -32L -> "EPIPE";
            case (int) -33L -> "EDOM";
            case (int) -34L -> "ERANGE";
            case (int) -35L -> "EDEADLK";
            case (int) -36L -> "ENAMETOOLONG";
            case (int) -37L -> "ENOLCK";
            case (int) -38L -> "ENOSYS";
            case (int) -39L -> "ENOTEMPTY";
            case (int) -40L -> "ELOOP";
            case (int) -42L -> "ENOMSG";
            case (int) -43L -> "EIDRM";
            case (int) -44L -> "ECHRNG";
            case (int) -45L -> "EL2NSYNC";
            case (int) -46L -> "EL3HLT";
            case (int) -47L -> "EL3RST";
            case (int) -48L -> "ELNRNG";
            case (int) -49L -> "EUNATCH";
            case (int) -50L -> "ENOCSI";
            case (int) -51L -> "EL2HLT";
            case (int) -52L -> "EBADE";
            case (int) -53L -> "EBADR";
            case (int) -54L -> "EXFULL";
            case (int) -55L -> "ENOANO";
            case (int) -56L -> "EBADRQC";
            case (int) -57L -> "EBADSLT";
            case (int) -59L -> "EBFONT";
            case (int) -60L -> "ENOSTR";
            case (int) -61L -> "ENODATA";
            case (int) -62L -> "ETIME";
            case (int) -63L -> "ENOSR";
            case (int) -64L -> "ENONET";
            case (int) -65L -> "ENOPKG";
            case (int) -66L -> "EREMOTE";
            case (int) -67L -> "ENOLINK";
            case (int) -68L -> "EADV";
            case (int) -69L -> "ESRMNT";
            case (int) -70L -> "ECOMM";
            case (int) -71L -> "EPROTO";
            case (int) -72L -> "EMULTIHOP";
            case (int) -73L -> "EDOTDOT";
            case (int) -74L -> "EBADMSG";
            case (int) -75L -> "EOVERFLOW";
            case (int) -76L -> "ENOTUNIQ";
            case (int) -77L -> "EBADFD";
            case (int) -78L -> "EREMCHG";
            case (int) -79L -> "ELIBACC";
            case (int) -80L -> "ELIBBAD";
            case (int) -81L -> "ELIBSCN";
            case (int) -82L -> "ELIBMAX";
            case (int) -83L -> "ELIBEXEC";
            case (int) -84L -> "EILSEQ";
            case (int) -85L -> "ERESTART";
            case (int) -86L -> "ESTRPIPE";
            case (int) -87L -> "EUSERS";
            case (int) -88L -> "ENOTSOCK";
            case (int) -89L -> "EDESTADDRREQ";
            case (int) -90L -> "EMSGSIZE";
            case (int) -91L -> "EPROTOTYPE";
            case (int) -92L -> "ENOPROTOOPT";
            case (int) -93L -> "EPROTONOSUPPORT";
            case (int) -94L -> "ESOCKTNOSUPPORT";
            case (int) -95L -> "EOPNOTSUPP";
            case (int) -96L -> "EPFNOSUPPORT";
            case (int) -97L -> "EAFNOSUPPORT";
            case (int) -98L -> "EADDRINUSE";
            case (int) -99L -> "EADDRNOTAVAIL";
            case (int) -100L -> "ENETDOWN";
            case (int) -101L -> "ENETUNREACH";
            case (int) -102L -> "ENETRESET";
            case (int) -103L -> "ECONNABORTED";
            case (int) -104L -> "ECONNRESET";
            case (int) -105L -> "ENOBUFS";
            case (int) -106L -> "EISCONN";
            case (int) -107L -> "ENOTCONN";
            case (int) -108L -> "ESHUTDOWN";
            case (int) -109L -> "ETOOMANYREFS";
            case (int) -110L -> "ETIMEDOUT";
            case (int) -111L -> "ECONNREFUSED";
            case (int) -112L -> "EHOSTDOWN";
            case (int) -113L -> "EHOSTUNREACH";
            case (int) -114L -> "EALREADY";
            case (int) -115L -> "EINPROGRESS";
            case (int) -116L -> "ESTALE";
            case (int) -117L -> "EUCLEAN";
            case (int) -118L -> "ENOTNAM";
            case (int) -119L -> "ENAVAIL";
            case (int) -120L -> "EISNAM";
            case (int) -121L -> "EREMOTEIO";
            case (int) -122L -> "EDQUOT";
            case (int) -123L -> "ENOMEDIUM";
            case (int) -124L -> "EMEDIUMTYPE";
            case (int) -125L -> "ECANCELED";
            case (int) -126L -> "ENOKEY";
            case (int) -127L -> "EKEYEXPIRED";
            case (int) -128L -> "EKEYREVOKED";
            case (int) -129L -> "EKEYREJECTED";
            case (int) -130L -> "EOWNERDEAD";
            case (int) -131L -> "ENOTRECOVERABLE";
            case (int) -132L -> "ERFKILL";
            case (int) -133L -> "EHWPOISON";
            case (int) -1179861752L -> "AVERROR_BSF_NOT_FOUND";
            case (int) -558323010L -> "AVERROR_BUG";
            case (int) -1397118274L -> "AVERROR_BUFFER_TOO_SMALL";
            case (int) -1128613112L -> "AVERROR_DECODER_NOT_FOUND";
            case (int) -1296385272L -> "AVERROR_DEMUXER_NOT_FOUND";
            case (int) -1129203192L -> "AVERROR_ENCODER_NOT_FOUND";
            case (int) -541478725L -> "AVERROR_EOF";
            case (int) -1414092869L -> "AVERROR_EXIT";
            case (int) -542398533L -> "AVERROR_EXTERNAL";
            case (int) -1279870712L -> "AVERROR_FILTER_NOT_FOUND";
            case (int) -1094995529L -> "AVERROR_INVALIDDATA";
            case (int) -1481985528L -> "AVERROR_MUXER_NOT_FOUND";
            case (int) -1414549496L -> "AVERROR_OPTION_NOT_FOUND";
            case (int) -1163346256L -> "AVERROR_PATCHWELCOME";
            case (int) -1330794744L -> "AVERROR_PROTOCOL_NOT_FOUND";
            case (int) -1381258232L -> "AVERROR_STREAM_NOT_FOUND";
            case (int) -541545794L -> "AVERROR_BUG2";
            case (int) -1313558101L -> "AVERROR_UNKNOWN";
            case (int) -733130664L -> "AVERROR_EXPERIMENTAL";
            case (int) -1668179713L -> "AVERROR_INPUT_CHANGED";
            case (int) -1668179714L -> "AVERROR_OUTPUT_CHANGED";
            case (int) -808465656L -> "AVERROR_HTTP_BAD_REQUEST";
            case (int) -825242872L -> "AVERROR_HTTP_UNAUTHORIZED";
            case (int) -858797304L -> "AVERROR_HTTP_FORBIDDEN";
            case (int) -875574520L -> "AVERROR_HTTP_NOT_FOUND";
            case (int) -1482175736L -> "AVERROR_HTTP_OTHER_4XX";
            case (int) -1482175992L -> "AVERROR_HTTP_SERVER_ERROR";
            default -> "Unkown";
        };
    }
}
