// Generated by jextract

package de.jowisoftware.rpgsoundscape.player.audio.frontend.ffmpeg.api;

import jdk.incubator.foreign.FunctionDescriptor;
import jdk.incubator.foreign.MemoryHandles;
import jdk.incubator.foreign.MemoryLayout;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;

import static jdk.incubator.foreign.CLinker.C_INT;
import static jdk.incubator.foreign.CLinker.C_LONG;
import static jdk.incubator.foreign.CLinker.C_POINTER;

class avcodec_h_constants {
    static final FunctionDescriptor avcodec_alloc_context3$FUNC_ = FunctionDescriptor.of(C_POINTER,
            C_POINTER
    );

    static final MethodHandle avcodec_alloc_context3$MH_ = RuntimeHelper.downcallHandle(
            "avcodec", "avcodec_alloc_context3",
            "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
            avcodec_alloc_context3$FUNC_
    );

    static final MemoryLayout AVFrame$struct$LAYOUT_ = MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(8, C_POINTER).withName("data"),
            MemoryLayout.ofSequence(8, C_INT).withName("linesize"),
            C_POINTER.withName("extended_data"),
            C_INT.withName("width"),
            C_INT.withName("height"),
            C_INT.withName("nb_samples"),
            C_INT.withName("format"),
            C_INT.withName("key_frame"),
            C_INT.withName("pict_type"),
            MemoryLayout.ofStruct(
                    C_INT.withName("num"),
                    C_INT.withName("den")
            ).withName("sample_aspect_ratio"),
            C_LONG.withName("pts"),
            C_LONG.withName("pkt_pts"),
            C_LONG.withName("pkt_dts"),
            C_INT.withName("coded_picture_number"),
            C_INT.withName("display_picture_number"),
            C_INT.withName("quality"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("opaque"),
            MemoryLayout.ofSequence(8, C_LONG).withName("error"),
            C_INT.withName("repeat_pict"),
            C_INT.withName("interlaced_frame"),
            C_INT.withName("top_field_first"),
            C_INT.withName("palette_has_changed"),
            C_LONG.withName("reordered_opaque"),
            C_INT.withName("sample_rate"),
            MemoryLayout.ofPaddingBits(32),
            C_LONG.withName("channel_layout"),
            MemoryLayout.ofSequence(8, C_POINTER).withName("buf"),
            C_POINTER.withName("extended_buf"),
            C_INT.withName("nb_extended_buf"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("side_data"),
            C_INT.withName("nb_side_data"),
            C_INT.withName("flags"),
            C_INT.withName("color_range"),
            C_INT.withName("color_primaries"),
            C_INT.withName("color_trc"),
            C_INT.withName("colorspace"),
            C_INT.withName("chroma_location"),
            MemoryLayout.ofPaddingBits(32),
            C_LONG.withName("best_effort_timestamp"),
            C_LONG.withName("pkt_pos"),
            C_LONG.withName("pkt_duration"),
            C_POINTER.withName("metadata"),
            C_INT.withName("decode_error_flags"),
            C_INT.withName("channels"),
            C_INT.withName("pkt_size"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("qscale_table"),
            C_INT.withName("qstride"),
            C_INT.withName("qscale_type"),
            C_POINTER.withName("qp_table_buf"),
            C_POINTER.withName("hw_frames_ctx"),
            C_POINTER.withName("opaque_ref"),
            C_LONG.withName("crop_top"),
            C_LONG.withName("crop_bottom"),
            C_LONG.withName("crop_left"),
            C_LONG.withName("crop_right"),
            C_POINTER.withName("private_ref")
    ).withName("AVFrame");
    static final VarHandle AVFrame$extended_data$VH_ = MemoryHandles.asAddressVarHandle(AVFrame$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("extended_data")));
    static final VarHandle AVFrame$nb_samples$VH_ = AVFrame$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nb_samples"));
    static final VarHandle AVFrame$format$VH_ = AVFrame$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("format"));
    static final VarHandle AVFrame$sample_rate$VH_ = AVFrame$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("sample_rate"));
    static final VarHandle AVFrame$channel_layout$VH_ = AVFrame$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("channel_layout"));
    static final VarHandle AVFrame$channels$VH_ = AVFrame$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("channels"));
    static final FunctionDescriptor av_frame_free$FUNC_ = FunctionDescriptor.ofVoid(
            C_POINTER
    );
    static final MethodHandle av_frame_free$MH_ = RuntimeHelper.downcallHandle(
            "avcodec", "av_frame_free",
            "(Ljdk/incubator/foreign/MemoryAddress;)V",
            av_frame_free$FUNC_
    );
    static final FunctionDescriptor av_freep$FUNC_ = FunctionDescriptor.ofVoid(
            C_POINTER
    );
    static final MethodHandle av_freep$MH_ = RuntimeHelper.downcallHandle(
            "avcodec", "av_freep",
            "(Ljdk/incubator/foreign/MemoryAddress;)V",
            av_freep$FUNC_
    );
    static final FunctionDescriptor av_rescale_rnd$FUNC_ = FunctionDescriptor.of(C_LONG,
            C_LONG,
            C_LONG,
            C_LONG,
            C_INT
    );
    static final MethodHandle av_rescale_rnd$MH_ = RuntimeHelper.downcallHandle(
            "avcodec", "av_rescale_rnd",
            "(JJJI)J",
            av_rescale_rnd$FUNC_
    );
    static final FunctionDescriptor av_samples_alloc$FUNC_ = FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER,
            C_INT,
            C_INT,
            C_INT,
            C_INT
    );
    static final MethodHandle av_samples_alloc$MH_ = RuntimeHelper.downcallHandle(
            "avcodec", "av_samples_alloc",
            "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIII)I",
            av_samples_alloc$FUNC_
    );
    static final FunctionDescriptor av_packet_alloc$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final MethodHandle av_packet_alloc$MH_ = RuntimeHelper.downcallHandle(
            "avcodec", "av_packet_alloc",
            "()Ljdk/incubator/foreign/MemoryAddress;",
            av_packet_alloc$FUNC_
    );
    static final FunctionDescriptor av_packet_free$FUNC_ = FunctionDescriptor.ofVoid(
            C_POINTER
    );
    static final MethodHandle av_packet_free$MH_ = RuntimeHelper.downcallHandle(
            "avcodec", "av_packet_free",
            "(Ljdk/incubator/foreign/MemoryAddress;)V",
            av_packet_free$FUNC_
    );

    static java.lang.invoke.MethodHandle avcodec_alloc_context3$MH() {
        return avcodec_alloc_context3$MH_;
    }

    static final FunctionDescriptor avcodec_parameters_to_context$FUNC_ = FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER
    );

    static final MethodHandle avcodec_parameters_to_context$MH_ = RuntimeHelper.downcallHandle(
            "avcodec", "avcodec_parameters_to_context",
            "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
            avcodec_parameters_to_context$FUNC_
    );

    static java.lang.invoke.MethodHandle avcodec_parameters_to_context$MH() {
        return avcodec_parameters_to_context$MH_;
    }

    static final FunctionDescriptor avcodec_open2$FUNC_ = FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER,
            C_POINTER
    );

    static final MethodHandle avcodec_open2$MH_ = RuntimeHelper.downcallHandle(
            "avcodec", "avcodec_open2",
            "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
            avcodec_open2$FUNC_
    );

    static java.lang.invoke.MethodHandle avcodec_open2$MH() {
        return avcodec_open2$MH_;
    }

    static final FunctionDescriptor avcodec_send_packet$FUNC_ = FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER
    );

    static final MethodHandle avcodec_send_packet$MH_ = RuntimeHelper.downcallHandle(
            "avcodec", "avcodec_send_packet",
            "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
            avcodec_send_packet$FUNC_
    );

    static java.lang.invoke.MethodHandle avcodec_send_packet$MH() {
        return avcodec_send_packet$MH_;
    }

    static final FunctionDescriptor avcodec_receive_frame$FUNC_ = FunctionDescriptor.of(C_INT,
            C_POINTER,
            C_POINTER
    );

    static final MethodHandle avcodec_receive_frame$MH_ = RuntimeHelper.downcallHandle(
            "avcodec", "avcodec_receive_frame",
            "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
            avcodec_receive_frame$FUNC_
    );

    static java.lang.invoke.MethodHandle avcodec_receive_frame$MH() {
        return avcodec_receive_frame$MH_;
    }

    static MethodHandle av_packet_alloc$MH() {
        return av_packet_alloc$MH_;
    }

    static MethodHandle av_packet_free$MH() {
        return av_packet_free$MH_;
    }

    static java.lang.invoke.VarHandle AVFrame$extended_data$VH() {
        return AVFrame$extended_data$VH_;
    }

    static java.lang.invoke.VarHandle AVFrame$nb_samples$VH() {
        return AVFrame$nb_samples$VH_;
    }

    static java.lang.invoke.VarHandle AVFrame$format$VH() {
        return AVFrame$format$VH_;
    }

    static java.lang.invoke.VarHandle AVFrame$sample_rate$VH() {
        return AVFrame$sample_rate$VH_;
    }

    static java.lang.invoke.VarHandle AVFrame$channel_layout$VH() {
        return AVFrame$channel_layout$VH_;
    }

    static java.lang.invoke.VarHandle AVFrame$channels$VH() {
        return AVFrame$channels$VH_;
    }

    static MethodHandle av_frame_free$MH() {
        return av_frame_free$MH_;
    }

    static MethodHandle av_freep$MH() {
        return av_freep$MH_;
    }

    static MethodHandle av_rescale_rnd$MH() {
        return av_rescale_rnd$MH_;
    }

    static int AV_SAMPLE_FMT_S16() {
        return (int) 1L;
    }

    static MethodHandle av_samples_alloc$MH() {
        return av_samples_alloc$MH_;
    }
}

