plugins {
    id "com.github.monosoul.markdown.page.generator" version "2.1.0.1"
}

evaluationDependsOn(':player')
evaluationDependsOn(':intellij-plugin')

jar {
    enabled = false
}

task testTask(type: Copy, dependsOn: ':player:distZip') {
    from zipTree(tasks.getByPath(':player:distZip').outputs.files[0])
    into 'build/test'
}

task copyCss(type: Copy) {
    from("${project.projectDir}/src/main/markdown") {
        include '*.css'
    }
    into "${project.buildDir}/docs"
}

task copyMarkdown(type: Copy) {
    from("${project.projectDir}/../LICENSE.md")
    from("${project.projectDir}/../standalone-dependencies/LICENSES.3rdParty.md")
    from("${project.projectDir}/src/main/markdown") {
        include '*.md'
    }
    into "${project.buildDir}/docs-source"
}

generateHtml {
    dependsOn(copyMarkdown)
    dependsOn(copyCss)

    inputDirectory = file("${project.buildDir}/docs-source")
    outputDirectory = file("${project.buildDir}/docs")
    headerHtmlFile = new File("${project.projectDir}/src/main/markdown/header.template")
    footerHtmlFile = new File("${project.projectDir}/src/main/markdown/footer.template")
    inputEncoding = "UTF-8"
    outputEncoding = "UTF-8"

    recursiveInput = false
    transformRelativeMarkdownLinks = true
    pegdownExtensions = "ANCHORLINKS, AUTOLINKS, TABLES, TOC, FENCED_CODE_BLOCKS, DEFINITIONS, STRIKETHROUGH"
}

task applicationZip(type: Zip) {
    dependsOn(':player:distZip')
    dependsOn(':intellij-plugin:buildPlugin')

    archiveBaseName = 'soundscape'
    archiveVersion = ''

    from (zipTree(tasks.getByPath(':player:distZip').outputs.files[0])) {
        include "**"
        includeEmptyDirs = false
        eachFile { fcd ->
            fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(1))
        }
    }

    from(tasks.getByPath(':intellij-plugin:buildPlugin').outputs.files[0])
    from(generateHtml) {
        into 'docs'
    }
    from(file("${project.projectDir}/src/main/templates"))
}

tasks.assemble.dependsOn(applicationZip)
