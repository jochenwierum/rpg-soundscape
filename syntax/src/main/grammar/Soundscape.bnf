{
    parserClass="de.jowisoftware.rpgsoundscape.language.parser.SoundscapeParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="S"
    psiImplClassSuffix="Impl"
    psiPackage="de.jowisoftware.rpgsoundscape.language.psi"
    psiImplPackage="de.jowisoftware.rpgsoundscape.language.psi.impl"

    elementTypeHolderClass="de.jowisoftware.rpgsoundscape.language.psi.SoundscapeTypes"
    elementTypeClass="de.jowisoftware.rpgsoundscape.language.psi.SoundscapeElementType"
    tokenTypeClass="de.jowisoftware.rpgsoundscape.language.psi.SoundscapeTokenType"

    psiImplUtilClass="de.jowisoftware.rpgsoundscape.language.psi.PsiImplUtil"


    extends(".*Id")="id"
    implements(".*Id")="de.jowisoftware.rpgsoundscape.language.psi.SoundscapeNamedElement"
    methods(".*Id")=[getName getNameIdentifier setName]

    extends(".*Ref")="reference"
    methods(".*Ref")=[getReference]

    extends("filename")="string"
    methods("filename")=[getReference parsed]

    extends(".*PlayModification|.*LoadModification")="sampleModification"
    extends(".*Modifications_")="sampleModificationList"
    extends("includableSoundscapeDefinition")="soundscapeDefinition"
    methods("includableSoundscapeDefinition")=[getString]

    implements(".*Definition|.*Statement|block|statement|randomlyWeight|rootContent|trackContent")="de.jowisoftware.rpgsoundscape.language.psi.SoundscapeStructureViewPsiElement"
    methods(".*Definition|.*Statement|block|randomlyWeight")=[getName getPresentation]
    methods("statement|block|repeatStatement|musicEffectDefinition|metadataStatement|rootContent|trackContent")=[skipInStructureView]

    methods("string|int|percentage|timespan")=[parsed]
}

root ::= !<<eof>> rootContent
rootContent ::= (rootItem_*)

private rootItem_ ::=
    sep_ |
    (includeDefinition sep_) |
    (loadDefinition sep_) |
    includableDefinitions_ |
    soundscapeDefinition |
    musicDefinition |
    effectDefinition
    {recoverWhile=root_item_recover_}
private root_item_recover_ ::= !(SOUNDSCAPE | INCLUDE | INCLUDABLE | LOAD | MUSIC | EFFECT)

// INCLUDE

includeDefinition ::= INCLUDE filename {pin=1}

// LOAD SAMPLE

loadDefinition ::= LOAD SAMPLE? sampleId FROM string loadModifications_? {pin=1}

// INCLUDABLE TRACK & INCLUDABLE SOUNDSCAPE

private includableTrackDefinition_ ::= INCLUDABLE includableTrackDefinition {pin=1}
private includableDefinitions_ ::= INCLUDABLE (includableTrackDefinition | includableSoundscapeDefinition) {pin=1}
includableTrackDefinition ::= TRACK includableTrackId block {pin=1}
includableSoundscapeDefinition ::= SOUNDSCAPE includableSoundscapeId CURLY_L soundscapeBlockStatement_* CURLY_R {pin=1}

// SOUNDSCAPE

soundscapeDefinition ::= SOUNDSCAPE string CURLY_L soundscapeBlockStatement_* CURLY_R {pin=1}

private soundscapeBlockStatement_ ::= (
    sep_ |
    (includeSoundscapeDefinition sep_) |
    (loadDefinition sep_) |
    includableTrackDefinition_ |
    trackDefinition |
    (metadataStatement sep_)
    )+ {recoverWhile=soundscapeBlockStatement_recover_}
private soundscapeBlockStatement_recover_ ::= !(CURLY_R | LOAD | LOOPING | MANUAL | INCLUDABLE | INCLUDE | DESCRIBED | CATEGORIZED)

// TRACK

trackDefinition ::= trackModifier_ TRACK trackId (WITH TITLE string)? block {pin=2}

private trackModifier_ ::= loopingTrackModifier | manualTrackModifier {recoverWhile=track_recover_}
private track_recover_ ::= !TRACK
loopingTrackModifier ::= LOOPING pausedModifier? hiddenModifier? {pin=1}
manualTrackModifier ::= MANUAL autostartingModifier? {pin=1}
pausedModifier ::= PAUSED
autostartingModifier ::= AUTOSTARTING
hiddenModifier ::= HIDDEN

// statement
statement ::=
    block |
    sep_ |
    (playStatement sep_) |
    (sleepStatement sep_) |
    (pauseStatement sep_) |
    (resumeStatement sep_) |
    (doNothingStatement sep_) |
    (includeTrackStatement sep_) |
    repeatStatement |
    randomlyStatement |
    parallellyStatement
    {
    pin(".*")=1
    recoverWhile=statement_recover_
    }
private statement_recover_ ::= !(CURLY_L | CURLY_R | sep_ | PLAY | SLEEP | REPEAT | PAUSE | RESUME | RANDOMLY | PARALLELLY | WEIGHTED | INCLUDE)

block ::= CURLY_L statement+ CURLY_R {pin=1}

// PLAY

playStatement ::= PLAY SAMPLE? sampleRef playModifications_? {pin=1}

// PAUSE

pauseStatement ::= PAUSE (pauseAllOtherTracks | pauseAllTracks | pauseThisTrack | trackNameReference_) {pin=1}
pauseAllOtherTracks ::= ALL OTHER TRACKS {pin=2}
pauseAllTracks ::= ALL TRACKS {pin=1}
pauseThisTrack ::= THIS TRACK {pin=1}
private trackNameReference_ ::= TRACK trackRef {pin=1}

// RESUME

resumeStatement ::= RESUME (trackNameReference_ | resumeLoopingTracksStatement) {pin=1}
resumeLoopingTracksStatement ::= LOOPING TRACKS {pin=1}

// SLEEP

sleepStatement ::= SLEEP (simpleSleepStatement_ | complexSleepStatement_) {pin=1}
private simpleSleepStatement_ ::= timespan
private complexSleepStatement_ ::= BETWEEN timespan AND timespan {pin=1}

// TIMES

repeatStatement ::= REPEAT (simpleRepeatStatement_ | complexRepeatStatement_) TIMES statement {pin=1}
private simpleRepeatStatement_ ::= int
private complexRepeatStatement_ ::= BETWEEN int AND int {pin=1}

// RANDOMLY

randomlyStatement ::= RANDOMLY CURLY_L randomlyWeight randomlyWeight+ CURLY_R {pin=1}
randomlyWeight ::= WEIGHTED WITH int statement {pin=1 recoverWhile=randomly_recover_}

// PARALLEL

parallellyStatement ::= PARALLELLY CURLY_L statement statement+ CURLY_R {pin=1}

// INCLUDE

includeTrackStatement ::= INCLUDE includableTrackRef {pin=1}

// DO NOTHING

doNothingStatement ::= DO NOTHING {pin=1}
private randomly_recover_ ::= !(CURLY_R | WEIGHTED)

// INCLUDE SOUNDSCAPE

includeSoundscapeDefinition ::= INCLUDE SOUNDSCAPE includableSoundscapeRef {pin=1}

// MUSIC & EFFECT

fake musicEffectDefinition ::= musicEffectDefinition_

musicDefinition ::= MUSIC musicEffectDefinition_ {pin=1 extends=musicEffectDefinition}
effectDefinition ::= EFFECT musicEffectDefinition_ {pin=1 extends=musicEffectDefinition}

private musicEffectDefinition_ ::= string FROM sampleRef playModifications_? ((CURLY_L musicEffectDefinitionDetails_ CURLY_R) | sep_)
private musicEffectDefinitionDetails_ ::=
    (metadataStatement sep_ )+
    {recoverWhile=musicEffectDefinitionDetails_recover_}
private musicEffectDefinitionDetails_recover_ ::= !(CURLY_R | DESCRIBED | CATEGORIZED)


// DESCRIBED & CATEGORY

metadataStatement ::= describedStatement | categoryStatement
describedStatement ::= DESCRIBED (BY | AS) string {pin=1}
categoryStatement ::= CATEGORIZED ((categorizedIn categorizedAs) | (categorizedAs categorizedIn)) {pin=1}
categorizedAs ::= AS string {pin=1}
categorizedIn ::= IN string {pin=1}


// MODIFICATIONS

fake sampleModificationList ::= playModificationItem_*

private playModifications_ ::= playModificationItem_ (listDelimiter_ playModificationItem_)*
private loadModifications_ ::= loadModificationItem_ (listDelimiter_ loadModificationItem_)*
private listDelimiter_ ::= LIST_DELIMITER | AND

fake sampleModification ::=

private playModificationItem_ ::=
    amplificationPlayModification |
    omissionPlayModification |
    limitPlayModification

private loadModificationItem_ ::=
    playModificationItem_ |
    attributionLoadModification |
    noConversionLoadModification

amplificationPlayModification ::= WITH AMPLIFICATION OF percentage {pin=2}
omissionPlayModification ::= WITH OMISSION OF FIRST timespan {pin=2}
limitPlayModification ::= WITH LIMIT TO timespan {pin=2}
attributionLoadModification ::= WITH ATTRIBUTION string {pin=2}
noConversionLoadModification ::= WITHOUT CONVERSION CACHE {pin=2}

// Other

fake id ::= IDENTIFIER
fake reference ::= IDENTIFIER

sampleRef ::= IDENTIFIER
 sampleId ::= IDENTIFIER

trackRef ::= IDENTIFIER
trackId ::= IDENTIFIER

includableTrackRef ::= IDENTIFIER
includableTrackId ::= IDENTIFIER

includableSoundscapeRef ::= IDENTIFIER
includableSoundscapeId ::= IDENTIFIER

filename ::= TEXT


string ::= TEXT
int ::= NUM_INTEGER
percentage ::= PERCENT
timespan ::= DURATION

private sep_ ::= SEPARATOR
